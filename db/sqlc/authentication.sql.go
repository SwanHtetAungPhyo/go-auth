// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: authentication.sql

package db

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO goauth_account (
    user_id,
    provider,
    provider_id
) VALUES (
             $1,
             $2,
             $3
         ) RETURNING id, user_id, provider, provider_id, created_at
`

type CreateAccountParams struct {
	UserID     pgtype.UUID `db:"user_id" json:"userId"`
	Provider   string      `db:"provider" json:"provider"`
	ProviderID string      `db:"provider_id" json:"providerId"`
}

// sql/queries/accounts.sql
func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (GoauthAccount, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.UserID, arg.Provider, arg.ProviderID)
	var i GoauthAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderID,
		&i.CreatedAt,
	)
	return i, err
}

const createEmailVerificationToken = `-- name: CreateEmailVerificationToken :one
INSERT INTO goauth_email_verification (
    user_id,
    token,
    expires_at
) VALUES (
             $1,
             $2,
             $3
         ) RETURNING id, user_id, token, expires_at, created_at
`

type CreateEmailVerificationTokenParams struct {
	UserID    pgtype.UUID        `db:"user_id" json:"userId"`
	Token     string             `db:"token" json:"token"`
	ExpiresAt pgtype.Timestamptz `db:"expires_at" json:"expiresAt"`
}

// sql/queries/email_verification.sql
func (q *Queries) CreateEmailVerificationToken(ctx context.Context, arg CreateEmailVerificationTokenParams) (GoauthEmailVerification, error) {
	row := q.db.QueryRow(ctx, createEmailVerificationToken, arg.UserID, arg.Token, arg.ExpiresAt)
	var i GoauthEmailVerification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const createPasswordResetToken = `-- name: CreatePasswordResetToken :one
INSERT INTO goauth_password_reset (
    user_id,
    token,
    expires_at
) VALUES (
             $1,
             $2,
             $3
         ) RETURNING id, user_id, token, expires_at, created_at
`

type CreatePasswordResetTokenParams struct {
	UserID    pgtype.UUID        `db:"user_id" json:"userId"`
	Token     string             `db:"token" json:"token"`
	ExpiresAt pgtype.Timestamptz `db:"expires_at" json:"expiresAt"`
}

// sql/queries/password_reset.sql
func (q *Queries) CreatePasswordResetToken(ctx context.Context, arg CreatePasswordResetTokenParams) (GoauthPasswordReset, error) {
	row := q.db.QueryRow(ctx, createPasswordResetToken, arg.UserID, arg.Token, arg.ExpiresAt)
	var i GoauthPasswordReset
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO goauth_session (
    user_id,
    token,
    expires_at,
    user_agent,
    ip_address
) VALUES (
             $1,
             $2,
             $3,
             $4,
             $5
         ) RETURNING id, user_id, token, expires_at, user_agent, ip_address, created_at
`

type CreateSessionParams struct {
	UserID    pgtype.UUID        `db:"user_id" json:"userId"`
	Token     string             `db:"token" json:"token"`
	ExpiresAt pgtype.Timestamptz `db:"expires_at" json:"expiresAt"`
	UserAgent pgtype.Text        `db:"user_agent" json:"userAgent"`
	IpAddress *netip.Addr        `db:"ip_address" json:"ipAddress"`
}

// sql/queries/sessions.sql
func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (GoauthSession, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.UserID,
		arg.Token,
		arg.ExpiresAt,
		arg.UserAgent,
		arg.IpAddress,
	)
	var i GoauthSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.UserAgent,
		&i.IpAddress,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM goauth_account
WHERE user_id = $1 AND provider = $2
`

type DeleteAccountParams struct {
	UserID   pgtype.UUID `db:"user_id" json:"userId"`
	Provider string      `db:"provider" json:"provider"`
}

func (q *Queries) DeleteAccount(ctx context.Context, arg DeleteAccountParams) error {
	_, err := q.db.Exec(ctx, deleteAccount, arg.UserID, arg.Provider)
	return err
}

const deleteEmailVerificationToken = `-- name: DeleteEmailVerificationToken :exec
DELETE FROM goauth_email_verification WHERE token = $1
`

func (q *Queries) DeleteEmailVerificationToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deleteEmailVerificationToken, token)
	return err
}

const deleteExpiredEmailVerificationTokens = `-- name: DeleteExpiredEmailVerificationTokens :exec
DELETE FROM goauth_email_verification WHERE expires_at <= NOW()
`

func (q *Queries) DeleteExpiredEmailVerificationTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredEmailVerificationTokens)
	return err
}

const deleteExpiredPasswordResetTokens = `-- name: DeleteExpiredPasswordResetTokens :exec
DELETE FROM goauth_password_reset WHERE expires_at <= NOW()
`

func (q *Queries) DeleteExpiredPasswordResetTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredPasswordResetTokens)
	return err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM goauth_session WHERE expires_at <= NOW()
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredSessions)
	return err
}

const deletePasswordResetToken = `-- name: DeletePasswordResetToken :exec
DELETE FROM goauth_password_reset WHERE token = $1
`

func (q *Queries) DeletePasswordResetToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deletePasswordResetToken, token)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM goauth_session WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM goauth_user WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const deleteUserEmailVerificationTokens = `-- name: DeleteUserEmailVerificationTokens :exec
DELETE FROM goauth_email_verification WHERE user_id = $1
`

func (q *Queries) DeleteUserEmailVerificationTokens(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserEmailVerificationTokens, userID)
	return err
}

const deleteUserPasswordResetTokens = `-- name: DeleteUserPasswordResetTokens :exec
DELETE FROM goauth_password_reset WHERE user_id = $1
`

func (q *Queries) DeleteUserPasswordResetTokens(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserPasswordResetTokens, userID)
	return err
}

const deleteUserSessions = `-- name: DeleteUserSessions :exec
DELETE FROM goauth_session WHERE user_id = $1
`

func (q *Queries) DeleteUserSessions(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserSessions, userID)
	return err
}

const getAccountByProvider = `-- name: GetAccountByProvider :one
SELECT a.id, a.user_id, a.provider, a.provider_id, a.created_at, u.id, u.email, u.hash_password, u.name, u.image, u.email_verified, u.two_factor_enabled, u.two_factor_secret, u.metadata, u.created_at, u.updated_at FROM goauth_account a
                         JOIN goauth_user u ON a.user_id = u.id
WHERE a.provider = $1 AND a.provider_id = $2
`

type GetAccountByProviderParams struct {
	Provider   string `db:"provider" json:"provider"`
	ProviderID string `db:"provider_id" json:"providerId"`
}

type GetAccountByProviderRow struct {
	ID               pgtype.UUID        `db:"id" json:"id"`
	UserID           pgtype.UUID        `db:"user_id" json:"userId"`
	Provider         string             `db:"provider" json:"provider"`
	ProviderID       string             `db:"provider_id" json:"providerId"`
	CreatedAt        pgtype.Timestamptz `db:"created_at" json:"createdAt"`
	ID_2             pgtype.UUID        `db:"id_2" json:"id2"`
	Email            string             `db:"email" json:"email"`
	HashPassword     string             `db:"hash_password" json:"hashPassword"`
	Name             pgtype.Text        `db:"name" json:"name"`
	Image            pgtype.Text        `db:"image" json:"image"`
	EmailVerified    pgtype.Bool        `db:"email_verified" json:"emailVerified"`
	TwoFactorEnabled pgtype.Bool        `db:"two_factor_enabled" json:"twoFactorEnabled"`
	TwoFactorSecret  pgtype.Text        `db:"two_factor_secret" json:"twoFactorSecret"`
	Metadata         []byte             `db:"metadata" json:"metadata"`
	CreatedAt_2      pgtype.Timestamptz `db:"created_at_2" json:"createdAt2"`
	UpdatedAt        pgtype.Timestamptz `db:"updated_at" json:"updatedAt"`
}

func (q *Queries) GetAccountByProvider(ctx context.Context, arg GetAccountByProviderParams) (GetAccountByProviderRow, error) {
	row := q.db.QueryRow(ctx, getAccountByProvider, arg.Provider, arg.ProviderID)
	var i GetAccountByProviderRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderID,
		&i.CreatedAt,
		&i.ID_2,
		&i.Email,
		&i.HashPassword,
		&i.Name,
		&i.Image,
		&i.EmailVerified,
		&i.TwoFactorEnabled,
		&i.TwoFactorSecret,
		&i.Metadata,
		&i.CreatedAt_2,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmailVerificationToken = `-- name: GetEmailVerificationToken :one
SELECT id, user_id, token, expires_at, created_at FROM goauth_email_verification
WHERE token = $1 AND expires_at > NOW()
`

func (q *Queries) GetEmailVerificationToken(ctx context.Context, token string) (GoauthEmailVerification, error) {
	row := q.db.QueryRow(ctx, getEmailVerificationToken, token)
	var i GoauthEmailVerification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPasswordResetToken = `-- name: GetPasswordResetToken :one
SELECT id, user_id, token, expires_at, created_at FROM goauth_password_reset
WHERE token = $1 AND expires_at > NOW()
`

func (q *Queries) GetPasswordResetToken(ctx context.Context, token string) (GoauthPasswordReset, error) {
	row := q.db.QueryRow(ctx, getPasswordResetToken, token)
	var i GoauthPasswordReset
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, token, expires_at, user_agent, ip_address, created_at FROM goauth_session
WHERE token = $1 AND expires_at > NOW()
`

func (q *Queries) GetSession(ctx context.Context, token string) (GoauthSession, error) {
	row := q.db.QueryRow(ctx, getSession, token)
	var i GoauthSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.UserAgent,
		&i.IpAddress,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT id, user_id, token, expires_at, user_agent, ip_address, created_at FROM goauth_session
WHERE id = $1 AND expires_at > NOW()
`

func (q *Queries) GetSessionByID(ctx context.Context, id pgtype.UUID) (GoauthSession, error) {
	row := q.db.QueryRow(ctx, getSessionByID, id)
	var i GoauthSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.UserAgent,
		&i.IpAddress,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    u.id, u.email, u.hash_password, u.name, u.image, u.email_verified, u.two_factor_enabled, u.two_factor_secret, u.metadata, u.created_at, u.updated_at,
    ARRAY_AGG(
    CASE
        WHEN a.id IS NOT NULL THEN
            ROW(a.id, a.provider, a.provider_id, a.created_at)::goauth_account
        ELSE NULL
        END
             ) FILTER (WHERE a.id IS NOT NULL) as accounts
FROM goauth_user u
         LEFT JOIN goauth_account a ON u.id = a.user_id
WHERE u.email = $1
GROUP BY u.id
`

type GetUserByEmailRow struct {
	ID               pgtype.UUID        `db:"id" json:"id"`
	Email            string             `db:"email" json:"email"`
	HashPassword     string             `db:"hash_password" json:"hashPassword"`
	Name             pgtype.Text        `db:"name" json:"name"`
	Image            pgtype.Text        `db:"image" json:"image"`
	EmailVerified    pgtype.Bool        `db:"email_verified" json:"emailVerified"`
	TwoFactorEnabled pgtype.Bool        `db:"two_factor_enabled" json:"twoFactorEnabled"`
	TwoFactorSecret  pgtype.Text        `db:"two_factor_secret" json:"twoFactorSecret"`
	Metadata         []byte             `db:"metadata" json:"metadata"`
	CreatedAt        pgtype.Timestamptz `db:"created_at" json:"createdAt"`
	UpdatedAt        pgtype.Timestamptz `db:"updated_at" json:"updatedAt"`
	Accounts         interface{}        `db:"accounts" json:"accounts"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashPassword,
		&i.Name,
		&i.Image,
		&i.EmailVerified,
		&i.TwoFactorEnabled,
		&i.TwoFactorSecret,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Accounts,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
    u.id, u.email, u.hash_password, u.name, u.image, u.email_verified, u.two_factor_enabled, u.two_factor_secret, u.metadata, u.created_at, u.updated_at,
    ARRAY_AGG(
    CASE
        WHEN a.id IS NOT NULL THEN
            ROW(a.id, a.provider, a.provider_id, a.created_at)::goauth_account
        ELSE NULL
        END
             ) FILTER (WHERE a.id IS NOT NULL) as accounts
FROM goauth_user u
         LEFT JOIN goauth_account a ON u.id = a.user_id
WHERE u.id = $1
GROUP BY u.id
`

type GetUserByIDRow struct {
	ID               pgtype.UUID        `db:"id" json:"id"`
	Email            string             `db:"email" json:"email"`
	HashPassword     string             `db:"hash_password" json:"hashPassword"`
	Name             pgtype.Text        `db:"name" json:"name"`
	Image            pgtype.Text        `db:"image" json:"image"`
	EmailVerified    pgtype.Bool        `db:"email_verified" json:"emailVerified"`
	TwoFactorEnabled pgtype.Bool        `db:"two_factor_enabled" json:"twoFactorEnabled"`
	TwoFactorSecret  pgtype.Text        `db:"two_factor_secret" json:"twoFactorSecret"`
	Metadata         []byte             `db:"metadata" json:"metadata"`
	CreatedAt        pgtype.Timestamptz `db:"created_at" json:"createdAt"`
	UpdatedAt        pgtype.Timestamptz `db:"updated_at" json:"updatedAt"`
	Accounts         interface{}        `db:"accounts" json:"accounts"`
}

func (q *Queries) GetUserByID(ctx context.Context, userID pgtype.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, userID)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashPassword,
		&i.Name,
		&i.Image,
		&i.EmailVerified,
		&i.TwoFactorEnabled,
		&i.TwoFactorSecret,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Accounts,
	)
	return i, err
}

const goAuthRegister = `-- name: GoAuthRegister :one
INSERT INTO goauth_user (
    email,
    hash_password,
    name,
    metadata
) VALUES (
             $1,
             $2,
             $3,
             $4
         ) RETURNING id, email, hash_password, name, image, email_verified, two_factor_enabled, two_factor_secret, metadata, created_at, updated_at
`

type GoAuthRegisterParams struct {
	Email        string      `db:"email" json:"email"`
	HashPassword string      `db:"hash_password" json:"hashPassword"`
	Name         pgtype.Text `db:"name" json:"name"`
	Metadata     []byte      `db:"metadata" json:"metadata"`
}

func (q *Queries) GoAuthRegister(ctx context.Context, arg GoAuthRegisterParams) (GoauthUser, error) {
	row := q.db.QueryRow(ctx, goAuthRegister,
		arg.Email,
		arg.HashPassword,
		arg.Name,
		arg.Metadata,
	)
	var i GoauthUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashPassword,
		&i.Name,
		&i.Image,
		&i.EmailVerified,
		&i.TwoFactorEnabled,
		&i.TwoFactorSecret,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE goauth_user
SET
    name = COALESCE($2, name),
    image = COALESCE($3, image),
    metadata = COALESCE($4, metadata),
    updated_at = NOW()
WHERE id = $1
RETURNING id, email, hash_password, name, image, email_verified, two_factor_enabled, two_factor_secret, metadata, created_at, updated_at
`

type UpdateUserParams struct {
	ID       pgtype.UUID `db:"id" json:"id"`
	Name     pgtype.Text `db:"name" json:"name"`
	Image    pgtype.Text `db:"image" json:"image"`
	Metadata []byte      `db:"metadata" json:"metadata"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (GoauthUser, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Image,
		arg.Metadata,
	)
	var i GoauthUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashPassword,
		&i.Name,
		&i.Image,
		&i.EmailVerified,
		&i.TwoFactorEnabled,
		&i.TwoFactorSecret,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserEmailVerified = `-- name: UpdateUserEmailVerified :exec
UPDATE goauth_user
SET email_verified = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateUserEmailVerifiedParams struct {
	ID            pgtype.UUID `db:"id" json:"id"`
	EmailVerified pgtype.Bool `db:"email_verified" json:"emailVerified"`
}

func (q *Queries) UpdateUserEmailVerified(ctx context.Context, arg UpdateUserEmailVerifiedParams) error {
	_, err := q.db.Exec(ctx, updateUserEmailVerified, arg.ID, arg.EmailVerified)
	return err
}

const updateUserTwoFactor = `-- name: UpdateUserTwoFactor :exec
UPDATE goauth_user
SET
    two_factor_enabled = $2,
    two_factor_secret = $3,
    updated_at = NOW()
WHERE id = $1
`

type UpdateUserTwoFactorParams struct {
	ID               pgtype.UUID `db:"id" json:"id"`
	TwoFactorEnabled pgtype.Bool `db:"two_factor_enabled" json:"twoFactorEnabled"`
	TwoFactorSecret  pgtype.Text `db:"two_factor_secret" json:"twoFactorSecret"`
}

func (q *Queries) UpdateUserTwoFactor(ctx context.Context, arg UpdateUserTwoFactorParams) error {
	_, err := q.db.Exec(ctx, updateUserTwoFactor, arg.ID, arg.TwoFactorEnabled, arg.TwoFactorSecret)
	return err
}
