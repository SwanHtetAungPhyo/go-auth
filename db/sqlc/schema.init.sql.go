// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: schema.init.sql

package db

import (
	"context"
)

const createAccountIndexes = `-- name: CreateAccountIndexes :exec
CREATE INDEX IF NOT EXISTS idx_goauth_account_user_id ON goauth_account(user_id)
`

func (q *Queries) CreateAccountIndexes(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createAccountIndexes)
	return err
}

const createAccountTable = `-- name: CreateAccountTable :exec
CREATE TABLE IF NOT EXISTS goauth_account (
                                              id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                                              user_id UUID NOT NULL REFERENCES goauth_user(id) ON DELETE CASCADE,
                                              provider VARCHAR(50) NOT NULL,
                                              provider_id VARCHAR(255) NOT NULL,
                                              created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                                              UNIQUE(provider, provider_id)
)
`

func (q *Queries) CreateAccountTable(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createAccountTable)
	return err
}

const createAuditLogTable = `-- name: CreateAuditLogTable :exec
CREATE  TABLE  IF NOT EXISTS  goauth_audit_log(
                                                  id serial primary key ,
                                                  event_type varchar not null ,
                                                  log_entry jsonb not null default  '{}',
                                                  occurred_at timestamp default  now()
)
`

func (q *Queries) CreateAuditLogTable(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createAuditLogTable)
	return err
}

const createEmailVerificationTable = `-- name: CreateEmailVerificationTable :exec
CREATE TABLE IF NOT EXISTS goauth_email_verification (
                                                         id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                                                         user_id UUID NOT NULL REFERENCES goauth_user(id) ON DELETE CASCADE,
                                                         token TEXT UNIQUE NOT NULL,
                                                         expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
                                                         created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
)
`

func (q *Queries) CreateEmailVerificationTable(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createEmailVerificationTable)
	return err
}

const createPasswordResetTable = `-- name: CreatePasswordResetTable :exec
CREATE TABLE IF NOT EXISTS goauth_password_reset (
                                                     id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                                                     user_id UUID NOT NULL REFERENCES goauth_user(id) ON DELETE CASCADE,
                                                     token TEXT UNIQUE NOT NULL,
                                                     expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
                                                     created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
)
`

func (q *Queries) CreatePasswordResetTable(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createPasswordResetTable)
	return err
}

const createSessionIndexes = `-- name: CreateSessionIndexes :exec
CREATE INDEX IF NOT EXISTS idx_goauth_session_user_id ON goauth_session(user_id)
`

func (q *Queries) CreateSessionIndexes(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createSessionIndexes)
	return err
}

const createSessionTable = `-- name: CreateSessionTable :exec
CREATE TABLE IF NOT EXISTS goauth_session (
                                              id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                                              user_id UUID NOT NULL REFERENCES goauth_user(id) ON DELETE CASCADE,
                                              token TEXT UNIQUE NOT NULL,
                                              expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
                                              user_agent TEXT,
                                              ip_address INET,
                                              created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
)
`

func (q *Queries) CreateSessionTable(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createSessionTable)
	return err
}

const createUserIndexes = `-- name: CreateUserIndexes :exec
CREATE INDEX IF NOT EXISTS idx_goauth_user_email ON goauth_user(email)
`

func (q *Queries) CreateUserIndexes(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createUserIndexes)
	return err
}

const createUserTable = `-- name: CreateUserTable :exec
CREATE TABLE IF NOT EXISTS goauth_user (
                                           id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                                           email VARCHAR(255) UNIQUE NOT NULL,
                                           hash_password TEXT NOT NULL,
                                           name VARCHAR(255),
                                           image TEXT,
                                           role_name varchar(60) not null  default 'USER',
                                           email_verified BOOLEAN DEFAULT FALSE,
                                           two_factor_enabled BOOLEAN DEFAULT FALSE,
                                           two_factor_secret TEXT,
                                           metadata JSONB DEFAULT '{}',
                                           created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                                           updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
)
`

func (q *Queries) CreateUserTable(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createUserTable)
	return err
}

const setupAuthTables = `-- name: SetupAuthTables :exec
CREATE TABLE IF NOT EXISTS goauth_user (
                                           id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                                           email VARCHAR(255) UNIQUE NOT NULL,
                                           hash_password TEXT NOT NULL,
                                           name VARCHAR(255),
                                           image TEXT,
                                           email_verified BOOLEAN DEFAULT FALSE,
                                           two_factor_enabled BOOLEAN DEFAULT FALSE,
                                           two_factor_secret TEXT,
                                           metadata JSONB DEFAULT '{}',
                                           created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                                           updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
)
`

// Complete setup in one command
func (q *Queries) SetupAuthTables(ctx context.Context) error {
	_, err := q.db.Exec(ctx, setupAuthTables)
	return err
}
